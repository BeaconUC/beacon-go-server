// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: system_config.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const bulkUpdateSystemConfig = `-- name: BulkUpdateSystemConfig :exec
UPDATE system_config AS sc SET
    value = c.value,
    description = c.description,
    updated_by = c.updated_by,
    updated_at = NOW()
FROM (VALUES 
    ($1::varchar, $2::text, $3::text, $4::bigint),
    ($5::varchar, $6::text, $7::text, $8::bigint)
) AS c(key, value, description, updated_by)
WHERE sc.key = c.key
`

type BulkUpdateSystemConfigParams struct {
	Column1 string
	Column2 string
	Column3 string
	Column4 int64
	Column5 string
	Column6 string
	Column7 string
	Column8 int64
}

func (q *Queries) BulkUpdateSystemConfig(ctx context.Context, arg BulkUpdateSystemConfigParams) error {
	_, err := q.db.ExecContext(ctx, bulkUpdateSystemConfig,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Column7,
		arg.Column8,
	)
	return err
}

const createSystemConfig = `-- name: CreateSystemConfig :one
INSERT INTO system_config (
    key,
    value,
    description,
    updated_by
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, public_id, key, value, description, updated_by, updated_at
`

type CreateSystemConfigParams struct {
	Key         string
	Value       string
	Description sql.NullString
	UpdatedBy   sql.NullInt64
}

func (q *Queries) CreateSystemConfig(ctx context.Context, arg CreateSystemConfigParams) (SystemConfig, error) {
	row := q.db.QueryRowContext(ctx, createSystemConfig,
		arg.Key,
		arg.Value,
		arg.Description,
		arg.UpdatedBy,
	)
	var i SystemConfig
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSystemConfig = `-- name: DeleteSystemConfig :exec
DELETE FROM system_config
WHERE id = $1
`

func (q *Queries) DeleteSystemConfig(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSystemConfig, id)
	return err
}

const deleteSystemConfigByKey = `-- name: DeleteSystemConfigByKey :exec
DELETE FROM system_config
WHERE key = $1
`

func (q *Queries) DeleteSystemConfigByKey(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteSystemConfigByKey, key)
	return err
}

const getApiSettings = `-- name: GetApiSettings :many
SELECT key, value, description 
FROM system_config
WHERE key LIKE 'api.%'
ORDER BY key
`

type GetApiSettingsRow struct {
	Key         string
	Value       string
	Description sql.NullString
}

func (q *Queries) GetApiSettings(ctx context.Context) ([]GetApiSettingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getApiSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetApiSettingsRow
	for rows.Next() {
		var i GetApiSettingsRow
		if err := rows.Scan(&i.Key, &i.Value, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfigValueByKey = `-- name: GetConfigValueByKey :one
SELECT value FROM system_config
WHERE key = $1
`

func (q *Queries) GetConfigValueByKey(ctx context.Context, key string) (string, error) {
	row := q.db.QueryRowContext(ctx, getConfigValueByKey, key)
	var value string
	err := row.Scan(&value)
	return value, err
}

const getNotificationSettings = `-- name: GetNotificationSettings :many
SELECT key, value, description 
FROM system_config
WHERE key LIKE 'notification.%'
ORDER BY key
`

type GetNotificationSettingsRow struct {
	Key         string
	Value       string
	Description sql.NullString
}

func (q *Queries) GetNotificationSettings(ctx context.Context) ([]GetNotificationSettingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotificationSettingsRow
	for rows.Next() {
		var i GetNotificationSettingsRow
		if err := rows.Scan(&i.Key, &i.Value, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemConfig = `-- name: GetSystemConfig :one
SELECT id, public_id, key, value, description, updated_by, updated_at FROM system_config
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSystemConfig(ctx context.Context, id int64) (SystemConfig, error) {
	row := q.db.QueryRowContext(ctx, getSystemConfig, id)
	var i SystemConfig
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getSystemConfigByKey = `-- name: GetSystemConfigByKey :one
SELECT id, public_id, key, value, description, updated_by, updated_at FROM system_config
WHERE key = $1 LIMIT 1
`

func (q *Queries) GetSystemConfigByKey(ctx context.Context, key string) (SystemConfig, error) {
	row := q.db.QueryRowContext(ctx, getSystemConfigByKey, key)
	var i SystemConfig
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getSystemConfigByPublicID = `-- name: GetSystemConfigByPublicID :one
SELECT id, public_id, key, value, description, updated_by, updated_at FROM system_config
WHERE public_id = $1 LIMIT 1
`

func (q *Queries) GetSystemConfigByPublicID(ctx context.Context, publicID uuid.UUID) (SystemConfig, error) {
	row := q.db.QueryRowContext(ctx, getSystemConfigByPublicID, publicID)
	var i SystemConfig
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getSystemConfigWithUpdater = `-- name: GetSystemConfigWithUpdater :one
SELECT 
    sc.id, sc.public_id, sc.key, sc.value, sc.description, sc.updated_by, sc.updated_at,
    p.public_id as updater_public_id,
    p.first_name as updater_first_name,
    p.last_name as updater_last_name
FROM system_config sc
LEFT JOIN profiles p ON sc.updated_by = p.id
WHERE sc.id = $1
`

type GetSystemConfigWithUpdaterRow struct {
	ID               int64
	PublicID         uuid.UUID
	Key              string
	Value            string
	Description      sql.NullString
	UpdatedBy        sql.NullInt64
	UpdatedAt        sql.NullTime
	UpdaterPublicID  uuid.NullUUID
	UpdaterFirstName sql.NullString
	UpdaterLastName  sql.NullString
}

func (q *Queries) GetSystemConfigWithUpdater(ctx context.Context, id int64) (GetSystemConfigWithUpdaterRow, error) {
	row := q.db.QueryRowContext(ctx, getSystemConfigWithUpdater, id)
	var i GetSystemConfigWithUpdaterRow
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.UpdaterPublicID,
		&i.UpdaterFirstName,
		&i.UpdaterLastName,
	)
	return i, err
}

const getSystemSettings = `-- name: GetSystemSettings :many
SELECT key, value, description 
FROM system_config
WHERE key LIKE 'system.%' OR key LIKE 'app.%'
ORDER BY key
`

type GetSystemSettingsRow struct {
	Key         string
	Value       string
	Description sql.NullString
}

func (q *Queries) GetSystemSettings(ctx context.Context) ([]GetSystemSettingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSystemSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSystemSettingsRow
	for rows.Next() {
		var i GetSystemSettingsRow
		if err := rows.Scan(&i.Key, &i.Value, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSystemConfig = `-- name: ListSystemConfig :many
SELECT id, public_id, key, value, description, updated_by, updated_at FROM system_config
ORDER BY key
LIMIT $1 OFFSET $2
`

type ListSystemConfigParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListSystemConfig(ctx context.Context, arg ListSystemConfigParams) ([]SystemConfig, error) {
	rows, err := q.db.QueryContext(ctx, listSystemConfig, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SystemConfig
	for rows.Next() {
		var i SystemConfig
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Key,
			&i.Value,
			&i.Description,
			&i.UpdatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSystemConfig = `-- name: SearchSystemConfig :many
SELECT id, public_id, key, value, description, updated_by, updated_at FROM system_config
WHERE key ILIKE '%' || $1 || '%' OR description ILIKE '%' || $1 || '%'
ORDER BY key
LIMIT $2 OFFSET $3
`

type SearchSystemConfigParams struct {
	Column1 sql.NullString
	Limit   int32
	Offset  int32
}

func (q *Queries) SearchSystemConfig(ctx context.Context, arg SearchSystemConfigParams) ([]SystemConfig, error) {
	rows, err := q.db.QueryContext(ctx, searchSystemConfig, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SystemConfig
	for rows.Next() {
		var i SystemConfig
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Key,
			&i.Value,
			&i.Description,
			&i.UpdatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setConfigValueByKey = `-- name: SetConfigValueByKey :one
INSERT INTO system_config (key, value, description, updated_by)
VALUES ($1, $2, $3, $4)
ON CONFLICT (key) 
DO UPDATE SET 
    value = EXCLUDED.value,
    description = EXCLUDED.description,
    updated_by = EXCLUDED.updated_by,
    updated_at = NOW()
RETURNING id, public_id, key, value, description, updated_by, updated_at
`

type SetConfigValueByKeyParams struct {
	Key         string
	Value       string
	Description sql.NullString
	UpdatedBy   sql.NullInt64
}

func (q *Queries) SetConfigValueByKey(ctx context.Context, arg SetConfigValueByKeyParams) (SystemConfig, error) {
	row := q.db.QueryRowContext(ctx, setConfigValueByKey,
		arg.Key,
		arg.Value,
		arg.Description,
		arg.UpdatedBy,
	)
	var i SystemConfig
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSystemConfig = `-- name: UpdateSystemConfig :one
UPDATE system_config
SET 
    key = $2,
    value = $3,
    description = $4,
    updated_by = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, public_id, key, value, description, updated_by, updated_at
`

type UpdateSystemConfigParams struct {
	ID          int64
	Key         string
	Value       string
	Description sql.NullString
	UpdatedBy   sql.NullInt64
}

func (q *Queries) UpdateSystemConfig(ctx context.Context, arg UpdateSystemConfigParams) (SystemConfig, error) {
	row := q.db.QueryRowContext(ctx, updateSystemConfig,
		arg.ID,
		arg.Key,
		arg.Value,
		arg.Description,
		arg.UpdatedBy,
	)
	var i SystemConfig
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSystemConfigByKey = `-- name: UpdateSystemConfigByKey :one
UPDATE system_config
SET 
    value = $2,
    description = $3,
    updated_by = $4,
    updated_at = NOW()
WHERE key = $1
RETURNING id, public_id, key, value, description, updated_by, updated_at
`

type UpdateSystemConfigByKeyParams struct {
	Key         string
	Value       string
	Description sql.NullString
	UpdatedBy   sql.NullInt64
}

func (q *Queries) UpdateSystemConfigByKey(ctx context.Context, arg UpdateSystemConfigByKeyParams) (SystemConfig, error) {
	row := q.db.QueryRowContext(ctx, updateSystemConfigByKey,
		arg.Key,
		arg.Value,
		arg.Description,
		arg.UpdatedBy,
	)
	var i SystemConfig
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}
