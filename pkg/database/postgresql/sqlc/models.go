// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AssignmentStatus string

const (
	AssignmentStatusAssigned  AssignmentStatus = "assigned"
	AssignmentStatusEnRoute   AssignmentStatus = "en_route"
	AssignmentStatusOnSite    AssignmentStatus = "on_site"
	AssignmentStatusPaused    AssignmentStatus = "paused"
	AssignmentStatusCompleted AssignmentStatus = "completed"
	AssignmentStatusCancelled AssignmentStatus = "cancelled"
)

func (e *AssignmentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AssignmentStatus(s)
	case string:
		*e = AssignmentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AssignmentStatus: %T", src)
	}
	return nil
}

type NullAssignmentStatus struct {
	AssignmentStatus AssignmentStatus
	Valid            bool // Valid is true if AssignmentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAssignmentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AssignmentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AssignmentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAssignmentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AssignmentStatus), nil
}

type CrewType string

const (
	CrewTypeTeam       CrewType = "team"
	CrewTypeIndividual CrewType = "individual"
)

func (e *CrewType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CrewType(s)
	case string:
		*e = CrewType(s)
	default:
		return fmt.Errorf("unsupported scan type for CrewType: %T", src)
	}
	return nil
}

type NullCrewType struct {
	CrewType CrewType
	Valid    bool // Valid is true if CrewType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCrewType) Scan(value interface{}) error {
	if value == nil {
		ns.CrewType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CrewType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCrewType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CrewType), nil
}

type OutageStatus string

const (
	OutageStatusUnverified    OutageStatus = "unverified"
	OutageStatusVerified      OutageStatus = "verified"
	OutageStatusBeingResolved OutageStatus = "being_resolved"
	OutageStatusResolved      OutageStatus = "resolved"
)

func (e *OutageStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OutageStatus(s)
	case string:
		*e = OutageStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OutageStatus: %T", src)
	}
	return nil
}

type NullOutageStatus struct {
	OutageStatus OutageStatus
	Valid        bool // Valid is true if OutageStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOutageStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OutageStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OutageStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOutageStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OutageStatus), nil
}

type OutageType string

const (
	OutageTypeUnscheduled OutageType = "unscheduled"
	OutageTypeScheduled   OutageType = "scheduled"
	OutageTypeEmergency   OutageType = "emergency"
)

func (e *OutageType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OutageType(s)
	case string:
		*e = OutageType(s)
	default:
		return fmt.Errorf("unsupported scan type for OutageType: %T", src)
	}
	return nil
}

type NullOutageType struct {
	OutageType OutageType
	Valid      bool // Valid is true if OutageType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOutageType) Scan(value interface{}) error {
	if value == nil {
		ns.OutageType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OutageType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOutageType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OutageType), nil
}

type ReportStatus string

const (
	ReportStatusUnprocessed          ReportStatus = "unprocessed"
	ReportStatusProcessedAsNewOutage ReportStatus = "processed_as_new_outage"
	ReportStatusProcessedAsDuplicate ReportStatus = "processed_as_duplicate"
	ReportStatusArchivedAsIsolated   ReportStatus = "archived_as_isolated"
)

func (e *ReportStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReportStatus(s)
	case string:
		*e = ReportStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReportStatus: %T", src)
	}
	return nil
}

type NullReportStatus struct {
	ReportStatus ReportStatus
	Valid        bool // Valid is true if ReportStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReportStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReportStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReportStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReportStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReportStatus), nil
}

type Roles string

const (
	RolesUser  Roles = "user"
	RolesCrew  Roles = "crew"
	RolesAdmin Roles = "admin"
)

func (e *Roles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roles(s)
	case string:
		*e = Roles(s)
	default:
		return fmt.Errorf("unsupported scan type for Roles: %T", src)
	}
	return nil
}

type NullRoles struct {
	Roles Roles
	Valid bool // Valid is true if Roles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoles) Scan(value interface{}) error {
	if value == nil {
		ns.Roles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Roles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Roles), nil
}

type Themes string

const (
	ThemesLight  Themes = "light"
	ThemesDark   Themes = "dark"
	ThemesSystem Themes = "system"
)

func (e *Themes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Themes(s)
	case string:
		*e = Themes(s)
	default:
		return fmt.Errorf("unsupported scan type for Themes: %T", src)
	}
	return nil
}

type NullThemes struct {
	Themes Themes
	Valid  bool // Valid is true if Themes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullThemes) Scan(value interface{}) error {
	if value == nil {
		ns.Themes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Themes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullThemes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Themes), nil
}

type AffectedArea struct {
	ID         int64
	OutageID   int64
	BarangayID int64
	CreatedAt  time.Time
}

type ApiKey struct {
	ID                 int64
	PublicID           uuid.UUID
	Name               string
	ApiKey             string
	SecretKey          sql.NullString
	ServiceName        sql.NullString
	IsActive           bool
	RateLimitPerMinute sql.NullInt32
	CreatedBy          sql.NullInt64
	CreatedAt          time.Time
	ExpiresAt          sql.NullTime
}

type Assignment struct {
	ID         int64
	OutageID   int64
	CrewID     int64
	Status     AssignmentStatus
	Notes      sql.NullString
	AssignedAt time.Time
	UpdatedAt  sql.NullTime
	PublicID   uuid.UUID
}

type Barangay struct {
	ID             int64
	PublicID       uuid.UUID
	Name           string
	CityID         int64
	FeederID       sql.NullInt64
	Boundary       interface{}
	Population     sql.NullInt32
	PopulationYear sql.NullInt16
	CreatedAt      time.Time
	UpdatedAt      sql.NullTime
}

type City struct {
	ID             int64
	PublicID       uuid.UUID
	Name           string
	ProvinceID     int64
	Boundary       interface{}
	Population     sql.NullInt32
	PopulationYear sql.NullInt16
	CreatedAt      time.Time
	UpdatedAt      sql.NullTime
}

type Crew struct {
	ID          int64
	PublicID    uuid.UUID
	Name        string
	CrewType    CrewType
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   sql.NullTime
}

type Feeder struct {
	ID           int64
	PublicID     uuid.UUID
	FeederNumber int64
	Boundary     interface{}
	CreatedAt    time.Time
	UpdatedAt    sql.NullTime
}

type Outage struct {
	ID                          int64
	PublicID                    uuid.UUID
	OutageType                  OutageType
	Status                      OutageStatus
	ConfidencePercentage        sql.NullFloat64
	Title                       sql.NullString
	Description                 sql.NullString
	NumberOfReports             sql.NullInt32
	EstimatedAffectedPopulation sql.NullInt32
	StartTime                   sql.NullTime
	EstimatedRestorationTime    sql.NullTime
	ActualRestorationTime       sql.NullTime
	ConfirmedBy                 sql.NullInt64
	ResolvedBy                  sql.NullInt64
	CreatedAt                   time.Time
	UpdatedAt                   sql.NullTime
}

type OutageReport struct {
	ID             int64
	PublicID       uuid.UUID
	ReportedBy     sql.NullInt64
	LinkedOutageID sql.NullInt64
	Description    sql.NullString
	ImageUrl       sql.NullString
	Location       interface{}
	ReportedAt     time.Time
	UpdatedAt      sql.NullTime
	Status         ReportStatus
}

type OutageSummary struct {
	ID                          int64
	PublicID                    uuid.UUID
	Status                      OutageStatus
	AffectedBarangayCount       int64
	EstimatedPopulationAffected interface{}
}

type OutageUpdate struct {
	ID          int64
	PublicID    uuid.UUID
	OutageID    int64
	UserID      int64
	OldStatus   OutageStatus
	NewStatus   OutageStatus
	Description sql.NullString
	CreatedAt   time.Time
}

type Profile struct {
	ID          int64
	PublicID    uuid.UUID
	UserID      uuid.UUID
	FirstName   string
	LastName    string
	Role        Roles
	PhoneNumber sql.NullString
	CreatedAt   time.Time
	UpdatedAt   sql.NullTime
}

type ProfileSetting struct {
	ID            int64
	ProfileID     sql.NullInt64
	Theme         Themes
	DynamicColor  bool
	FontScale     string
	ReduceMotion  bool
	Language      string
	ExtraSettings json.RawMessage
	CreatedAt     time.Time
	UpdatedAt     sql.NullTime
}

type Province struct {
	ID             int64
	PublicID       uuid.UUID
	Name           string
	Boundary       interface{}
	Population     sql.NullInt32
	PopulationYear sql.NullInt16
	CreatedAt      time.Time
	UpdatedAt      sql.NullTime
}

type SystemConfig struct {
	ID          int64
	PublicID    uuid.UUID
	Key         string
	Value       string
	Description sql.NullString
	UpdatedBy   sql.NullInt64
	UpdatedAt   sql.NullTime
}

type WeatherDatum struct {
	ID                   int64
	PublicID             uuid.UUID
	CityID               int64
	Temperature          string
	FeelsLike            sql.NullString
	Humidity             sql.NullInt32
	AtmosphericPressure  sql.NullInt32
	WindSpeed            sql.NullString
	Precipitation        sql.NullString
	ConditionMain        sql.NullString
	ConditionDescription sql.NullString
	RecordedAt           time.Time
	CreatedAt            time.Time
}
