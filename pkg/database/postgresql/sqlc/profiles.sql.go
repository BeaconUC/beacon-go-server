// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: profiles.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const countProfilesByRole = `-- name: CountProfilesByRole :one
SELECT role, COUNT(*) AS count
FROM profiles
GROUP BY role
`

type CountProfilesByRoleRow struct {
	Role  Roles
	Count int64
}

func (q *Queries) CountProfilesByRole(ctx context.Context) (CountProfilesByRoleRow, error) {
	row := q.db.QueryRowContext(ctx, countProfilesByRole)
	var i CountProfilesByRoleRow
	err := row.Scan(&i.Role, &i.Count)
	return i, err
}

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (
    user_id,
    first_name,
    last_name,
    role,
    phone_number
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, public_id, user_id, first_name, last_name, role, phone_number, created_at, updated_at
`

type CreateProfileParams struct {
	UserID      uuid.UUID
	FirstName   string
	LastName    string
	Role        Roles
	PhoneNumber sql.NullString
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Role,
		arg.PhoneNumber,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProfileSettings = `-- name: CreateProfileSettings :one
INSERT INTO profile_settings (
    profile_id,
    theme,
    dynamic_color,
    font_scale,
    reduce_motion,
    language,
    extra_settings
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, profile_id, theme, dynamic_color, font_scale, reduce_motion, language, extra_settings, created_at, updated_at
`

type CreateProfileSettingsParams struct {
	ProfileID     sql.NullInt64
	Theme         Themes
	DynamicColor  bool
	FontScale     string
	ReduceMotion  bool
	Language      string
	ExtraSettings json.RawMessage
}

func (q *Queries) CreateProfileSettings(ctx context.Context, arg CreateProfileSettingsParams) (ProfileSetting, error) {
	row := q.db.QueryRowContext(ctx, createProfileSettings,
		arg.ProfileID,
		arg.Theme,
		arg.DynamicColor,
		arg.FontScale,
		arg.ReduceMotion,
		arg.Language,
		arg.ExtraSettings,
	)
	var i ProfileSetting
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Theme,
		&i.DynamicColor,
		&i.FontScale,
		&i.ReduceMotion,
		&i.Language,
		&i.ExtraSettings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles
WHERE id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const deleteProfileSettings = `-- name: DeleteProfileSettings :exec
DELETE FROM profile_settings
WHERE profile_id = $1
`

func (q *Queries) DeleteProfileSettings(ctx context.Context, profileID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteProfileSettings, profileID)
	return err
}

const getAdminProfiles = `-- name: GetAdminProfiles :many
SELECT p.id, p.public_id, p.user_id, p.first_name, p.last_name, p.role, p.phone_number, p.created_at, p.updated_at FROM profiles p
WHERE p.role = 'admin'
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type GetAdminProfilesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAdminProfiles(ctx context.Context, arg GetAdminProfilesParams) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, getAdminProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCrewProfiles = `-- name: GetCrewProfiles :many
SELECT p.id, p.public_id, p.user_id, p.first_name, p.last_name, p.role, p.phone_number, p.created_at, p.updated_at FROM profiles p
WHERE p.role = 'crew'
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type GetCrewProfilesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetCrewProfiles(ctx context.Context, arg GetCrewProfilesParams) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, getCrewProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfile = `-- name: GetProfile :one
SELECT id, public_id, user_id, first_name, last_name, role, phone_number, created_at, updated_at FROM profiles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, id int64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileActivityStats = `-- name: GetProfileActivityStats :one
SELECT 
    p.id, p.public_id, p.user_id, p.first_name, p.last_name, p.role, p.phone_number, p.created_at, p.updated_at,
    COUNT("or".id) AS reports_submitted,
    COUNT(ou.id) AS updates_made,
    COUNT(ak.id) AS api_keys_created
FROM profiles p
LEFT JOIN outage_reports "or" ON p.id = "or".reported_by
LEFT JOIN outage_updates ou ON p.id = ou.user_id
LEFT JOIN api_keys ak ON p.id = ak.created_by
WHERE p.id = $1
GROUP BY p.id
`

type GetProfileActivityStatsRow struct {
	ID               int64
	PublicID         uuid.UUID
	UserID           uuid.UUID
	FirstName        string
	LastName         string
	Role             Roles
	PhoneNumber      sql.NullString
	CreatedAt        time.Time
	UpdatedAt        sql.NullTime
	ReportsSubmitted int64
	UpdatesMade      int64
	ApiKeysCreated   int64
}

func (q *Queries) GetProfileActivityStats(ctx context.Context, id int64) (GetProfileActivityStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileActivityStats, id)
	var i GetProfileActivityStatsRow
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReportsSubmitted,
		&i.UpdatesMade,
		&i.ApiKeysCreated,
	)
	return i, err
}

const getProfileAssignments = `-- name: GetProfileAssignments :many
SELECT 
    a.id, a.outage_id, a.crew_id, a.status, a.notes, a.assigned_at, a.updated_at, a.public_id,
    o.public_id AS outage_public_id,
    o.title AS outage_title,
    o.status AS outage_status,
    c.public_id AS crew_public_id,
    c.name AS crew_name
FROM assignments a
JOIN outages o ON a.outage_id = o.id
JOIN crews c ON a.crew_id = c.id
JOIN profiles p ON c.id = p.id
WHERE p.id = $1
ORDER BY a.assigned_at DESC
LIMIT $2 OFFSET $3
`

type GetProfileAssignmentsParams struct {
	ID     int64
	Limit  int32
	Offset int32
}

type GetProfileAssignmentsRow struct {
	ID             int64
	OutageID       int64
	CrewID         int64
	Status         AssignmentStatus
	Notes          sql.NullString
	AssignedAt     time.Time
	UpdatedAt      sql.NullTime
	PublicID       uuid.UUID
	OutagePublicID uuid.UUID
	OutageTitle    sql.NullString
	OutageStatus   OutageStatus
	CrewPublicID   uuid.UUID
	CrewName       string
}

func (q *Queries) GetProfileAssignments(ctx context.Context, arg GetProfileAssignmentsParams) ([]GetProfileAssignmentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfileAssignments, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProfileAssignmentsRow
	for rows.Next() {
		var i GetProfileAssignmentsRow
		if err := rows.Scan(
			&i.ID,
			&i.OutageID,
			&i.CrewID,
			&i.Status,
			&i.Notes,
			&i.AssignedAt,
			&i.UpdatedAt,
			&i.PublicID,
			&i.OutagePublicID,
			&i.OutageTitle,
			&i.OutageStatus,
			&i.CrewPublicID,
			&i.CrewName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileByPublicID = `-- name: GetProfileByPublicID :one
SELECT id, public_id, user_id, first_name, last_name, role, phone_number, created_at, updated_at FROM profiles
WHERE public_id = $1 LIMIT 1
`

func (q *Queries) GetProfileByPublicID(ctx context.Context, publicID uuid.UUID) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByPublicID, publicID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT id, public_id, user_id, first_name, last_name, role, phone_number, created_at, updated_at FROM profiles
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetProfileByUserID(ctx context.Context, userID uuid.UUID) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileByUserID, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileSettings = `-- name: GetProfileSettings :one
SELECT id, profile_id, theme, dynamic_color, font_scale, reduce_motion, language, extra_settings, created_at, updated_at FROM profile_settings
WHERE profile_id = $1 LIMIT 1
`

func (q *Queries) GetProfileSettings(ctx context.Context, profileID sql.NullInt64) (ProfileSetting, error) {
	row := q.db.QueryRowContext(ctx, getProfileSettings, profileID)
	var i ProfileSetting
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Theme,
		&i.DynamicColor,
		&i.FontScale,
		&i.ReduceMotion,
		&i.Language,
		&i.ExtraSettings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileWithSettings = `-- name: GetProfileWithSettings :one
SELECT 
    p.id, p.public_id, p.user_id, p.first_name, p.last_name, p.role, p.phone_number, p.created_at, p.updated_at,
    ps.theme,
    ps.dynamic_color,
    ps.font_scale,
    ps.reduce_motion,
    ps.language,
    ps.extra_settings
FROM profiles p
LEFT JOIN profile_settings ps ON p.id = ps.profile_id
WHERE p.id = $1
`

type GetProfileWithSettingsRow struct {
	ID            int64
	PublicID      uuid.UUID
	UserID        uuid.UUID
	FirstName     string
	LastName      string
	Role          Roles
	PhoneNumber   sql.NullString
	CreatedAt     time.Time
	UpdatedAt     sql.NullTime
	Theme         NullThemes
	DynamicColor  sql.NullBool
	FontScale     sql.NullString
	ReduceMotion  sql.NullBool
	Language      sql.NullString
	ExtraSettings pqtype.NullRawMessage
}

func (q *Queries) GetProfileWithSettings(ctx context.Context, id int64) (GetProfileWithSettingsRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileWithSettings, id)
	var i GetProfileWithSettingsRow
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Theme,
		&i.DynamicColor,
		&i.FontScale,
		&i.ReduceMotion,
		&i.Language,
		&i.ExtraSettings,
	)
	return i, err
}

const getUserProfiles = `-- name: GetUserProfiles :many
SELECT p.id, p.public_id, p.user_id, p.first_name, p.last_name, p.role, p.phone_number, p.created_at, p.updated_at FROM profiles p
WHERE p.role = 'user'
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type GetUserProfilesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUserProfiles(ctx context.Context, arg GetUserProfilesParams) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, getUserProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfiles = `-- name: ListProfiles :many
SELECT id, public_id, user_id, first_name, last_name, role, phone_number, created_at, updated_at FROM profiles
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListProfilesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListProfiles(ctx context.Context, arg ListProfilesParams) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, listProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfilesByRole = `-- name: ListProfilesByRole :many
SELECT id, public_id, user_id, first_name, last_name, role, phone_number, created_at, updated_at FROM profiles
WHERE role = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProfilesByRoleParams struct {
	Role   Roles
	Limit  int32
	Offset int32
}

func (q *Queries) ListProfilesByRole(ctx context.Context, arg ListProfilesByRoleParams) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, listProfilesByRole, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProfiles = `-- name: SearchProfiles :many
SELECT id, public_id, user_id, first_name, last_name, role, phone_number, created_at, updated_at FROM profiles
WHERE first_name ILIKE '%' || $1 || '%' OR last_name ILIKE '%' || $1 || '%'
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type SearchProfilesParams struct {
	Column1 sql.NullString
	Limit   int32
	Offset  int32
}

func (q *Queries) SearchProfiles(ctx context.Context, arg SearchProfilesParams) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, searchProfiles, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
SET 
    first_name = $2,
    last_name = $3,
    role = $4,
    phone_number = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, public_id, user_id, first_name, last_name, role, phone_number, created_at, updated_at
`

type UpdateProfileParams struct {
	ID          int64
	FirstName   string
	LastName    string
	Role        Roles
	PhoneNumber sql.NullString
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Role,
		arg.PhoneNumber,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProfileRole = `-- name: UpdateProfileRole :one
UPDATE profiles
SET 
    role = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, public_id, user_id, first_name, last_name, role, phone_number, created_at, updated_at
`

type UpdateProfileRoleParams struct {
	ID   int64
	Role Roles
}

func (q *Queries) UpdateProfileRole(ctx context.Context, arg UpdateProfileRoleParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfileRole, arg.ID, arg.Role)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProfileSettings = `-- name: UpdateProfileSettings :one
UPDATE profile_settings
SET 
    theme = $2,
    dynamic_color = $3,
    font_scale = $4,
    reduce_motion = $5,
    language = $6,
    extra_settings = $7,
    updated_at = NOW()
WHERE profile_id = $1
RETURNING id, profile_id, theme, dynamic_color, font_scale, reduce_motion, language, extra_settings, created_at, updated_at
`

type UpdateProfileSettingsParams struct {
	ProfileID     sql.NullInt64
	Theme         Themes
	DynamicColor  bool
	FontScale     string
	ReduceMotion  bool
	Language      string
	ExtraSettings json.RawMessage
}

func (q *Queries) UpdateProfileSettings(ctx context.Context, arg UpdateProfileSettingsParams) (ProfileSetting, error) {
	row := q.db.QueryRowContext(ctx, updateProfileSettings,
		arg.ProfileID,
		arg.Theme,
		arg.DynamicColor,
		arg.FontScale,
		arg.ReduceMotion,
		arg.Language,
		arg.ExtraSettings,
	)
	var i ProfileSetting
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Theme,
		&i.DynamicColor,
		&i.FontScale,
		&i.ReduceMotion,
		&i.Language,
		&i.ExtraSettings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProfileTheme = `-- name: UpdateProfileTheme :one
UPDATE profile_settings
SET 
    theme = $2,
    updated_at = NOW()
WHERE profile_id = $1
RETURNING id, profile_id, theme, dynamic_color, font_scale, reduce_motion, language, extra_settings, created_at, updated_at
`

type UpdateProfileThemeParams struct {
	ProfileID sql.NullInt64
	Theme     Themes
}

func (q *Queries) UpdateProfileTheme(ctx context.Context, arg UpdateProfileThemeParams) (ProfileSetting, error) {
	row := q.db.QueryRowContext(ctx, updateProfileTheme, arg.ProfileID, arg.Theme)
	var i ProfileSetting
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Theme,
		&i.DynamicColor,
		&i.FontScale,
		&i.ReduceMotion,
		&i.Language,
		&i.ExtraSettings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
