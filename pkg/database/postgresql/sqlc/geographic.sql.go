// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: geographic.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBarangay = `-- name: CreateBarangay :one
INSERT INTO barangays (
    name,
    city_id,
    feeder_id,
    boundary,
    population,
    population_year
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, public_id, name, city_id, feeder_id, boundary, population, population_year, created_at, updated_at
`

type CreateBarangayParams struct {
	Name           string
	CityID         int64
	FeederID       sql.NullInt64
	Boundary       interface{}
	Population     sql.NullInt32
	PopulationYear sql.NullInt16
}

func (q *Queries) CreateBarangay(ctx context.Context, arg CreateBarangayParams) (Barangay, error) {
	row := q.db.QueryRowContext(ctx, createBarangay,
		arg.Name,
		arg.CityID,
		arg.FeederID,
		arg.Boundary,
		arg.Population,
		arg.PopulationYear,
	)
	var i Barangay
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.CityID,
		&i.FeederID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCity = `-- name: CreateCity :one
INSERT INTO cities (
    name,
    province_id,
    boundary,
    population,
    population_year
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, public_id, name, province_id, boundary, population, population_year, created_at, updated_at
`

type CreateCityParams struct {
	Name           string
	ProvinceID     int64
	Boundary       interface{}
	Population     sql.NullInt32
	PopulationYear sql.NullInt16
}

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, createCity,
		arg.Name,
		arg.ProvinceID,
		arg.Boundary,
		arg.Population,
		arg.PopulationYear,
	)
	var i City
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.ProvinceID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFeeder = `-- name: CreateFeeder :one
INSERT INTO feeders (
    feeder_number,
    boundary
) VALUES (
    $1, $2
)
RETURNING id, public_id, feeder_number, boundary, created_at, updated_at
`

type CreateFeederParams struct {
	FeederNumber int64
	Boundary     interface{}
}

func (q *Queries) CreateFeeder(ctx context.Context, arg CreateFeederParams) (Feeder, error) {
	row := q.db.QueryRowContext(ctx, createFeeder, arg.FeederNumber, arg.Boundary)
	var i Feeder
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FeederNumber,
		&i.Boundary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProvince = `-- name: CreateProvince :one
INSERT INTO provinces (
    name,
    boundary,
    population,
    population_year
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, public_id, name, boundary, population, population_year, created_at, updated_at
`

type CreateProvinceParams struct {
	Name           string
	Boundary       interface{}
	Population     sql.NullInt32
	PopulationYear sql.NullInt16
}

func (q *Queries) CreateProvince(ctx context.Context, arg CreateProvinceParams) (Province, error) {
	row := q.db.QueryRowContext(ctx, createProvince,
		arg.Name,
		arg.Boundary,
		arg.Population,
		arg.PopulationYear,
	)
	var i Province
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBarangay = `-- name: DeleteBarangay :exec
DELETE FROM barangays
WHERE id = $1
`

func (q *Queries) DeleteBarangay(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBarangay, id)
	return err
}

const deleteCity = `-- name: DeleteCity :exec
DELETE FROM cities
WHERE id = $1
`

func (q *Queries) DeleteCity(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCity, id)
	return err
}

const deleteFeeder = `-- name: DeleteFeeder :exec
DELETE FROM feeders
WHERE id = $1
`

func (q *Queries) DeleteFeeder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeeder, id)
	return err
}

const deleteProvince = `-- name: DeleteProvince :exec
DELETE FROM provinces
WHERE id = $1
`

func (q *Queries) DeleteProvince(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProvince, id)
	return err
}

const getBarangay = `-- name: GetBarangay :one
SELECT id, public_id, name, city_id, feeder_id, boundary, population, population_year, created_at, updated_at FROM barangays
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBarangay(ctx context.Context, id int64) (Barangay, error) {
	row := q.db.QueryRowContext(ctx, getBarangay, id)
	var i Barangay
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.CityID,
		&i.FeederID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBarangayByPublicID = `-- name: GetBarangayByPublicID :one
SELECT id, public_id, name, city_id, feeder_id, boundary, population, population_year, created_at, updated_at FROM barangays
WHERE public_id = $1 LIMIT 1
`

func (q *Queries) GetBarangayByPublicID(ctx context.Context, publicID uuid.UUID) (Barangay, error) {
	row := q.db.QueryRowContext(ctx, getBarangayByPublicID, publicID)
	var i Barangay
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.CityID,
		&i.FeederID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBarangayWithDetails = `-- name: GetBarangayWithDetails :one
SELECT 
    b.id, b.public_id, b.name, b.city_id, b.feeder_id, b.boundary, b.population, b.population_year, b.created_at, b.updated_at,
    c.name as city_name,
    c.public_id as city_public_id,
    p.name as province_name,
    p.public_id as province_public_id,
    f.feeder_number
FROM barangays b
JOIN cities c ON b.city_id = c.id
JOIN provinces p ON c.province_id = p.id
LEFT JOIN feeders f ON b.feeder_id = f.id
WHERE b.id = $1
`

type GetBarangayWithDetailsRow struct {
	ID               int64
	PublicID         uuid.UUID
	Name             string
	CityID           int64
	FeederID         sql.NullInt64
	Boundary         interface{}
	Population       sql.NullInt32
	PopulationYear   sql.NullInt16
	CreatedAt        time.Time
	UpdatedAt        sql.NullTime
	CityName         string
	CityPublicID     uuid.UUID
	ProvinceName     string
	ProvincePublicID uuid.UUID
	FeederNumber     sql.NullInt64
}

func (q *Queries) GetBarangayWithDetails(ctx context.Context, id int64) (GetBarangayWithDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getBarangayWithDetails, id)
	var i GetBarangayWithDetailsRow
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.CityID,
		&i.FeederID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CityName,
		&i.CityPublicID,
		&i.ProvinceName,
		&i.ProvincePublicID,
		&i.FeederNumber,
	)
	return i, err
}

const getBarangaysWithinBoundary = `-- name: GetBarangaysWithinBoundary :many
SELECT id, public_id, name, city_id, feeder_id, boundary, population, population_year, created_at, updated_at FROM barangays
WHERE ST_Within($1, boundary) -- $1 is point geometry
ORDER BY name
`

func (q *Queries) GetBarangaysWithinBoundary(ctx context.Context, stWithin interface{}) ([]Barangay, error) {
	rows, err := q.db.QueryContext(ctx, getBarangaysWithinBoundary, stWithin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Barangay
	for rows.Next() {
		var i Barangay
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.CityID,
			&i.FeederID,
			&i.Boundary,
			&i.Population,
			&i.PopulationYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCity = `-- name: GetCity :one
SELECT id, public_id, name, province_id, boundary, population, population_year, created_at, updated_at FROM cities
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCity(ctx context.Context, id int64) (City, error) {
	row := q.db.QueryRowContext(ctx, getCity, id)
	var i City
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.ProvinceID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCityByName = `-- name: GetCityByName :one
SELECT id, public_id, name, province_id, boundary, population, population_year, created_at, updated_at FROM cities
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCityByName(ctx context.Context, name string) (City, error) {
	row := q.db.QueryRowContext(ctx, getCityByName, name)
	var i City
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.ProvinceID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCityByPublicID = `-- name: GetCityByPublicID :one
SELECT id, public_id, name, province_id, boundary, population, population_year, created_at, updated_at FROM cities
WHERE public_id = $1 LIMIT 1
`

func (q *Queries) GetCityByPublicID(ctx context.Context, publicID uuid.UUID) (City, error) {
	row := q.db.QueryRowContext(ctx, getCityByPublicID, publicID)
	var i City
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.ProvinceID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCityWithDetails = `-- name: GetCityWithDetails :one
SELECT 
    c.id, c.public_id, c.name, c.province_id, c.boundary, c.population, c.population_year, c.created_at, c.updated_at,
    p.name as province_name,
    p.public_id as province_public_id,
    COUNT(b.id) as barangay_count,
    COALESCE(SUM(b.population), 0) as total_population
FROM cities c
JOIN provinces p ON c.province_id = p.id
LEFT JOIN barangays b ON c.id = b.city_id
WHERE c.id = $1
GROUP BY c.id, p.id
`

type GetCityWithDetailsRow struct {
	ID               int64
	PublicID         uuid.UUID
	Name             string
	ProvinceID       int64
	Boundary         interface{}
	Population       sql.NullInt32
	PopulationYear   sql.NullInt16
	CreatedAt        time.Time
	UpdatedAt        sql.NullTime
	ProvinceName     string
	ProvincePublicID uuid.UUID
	BarangayCount    int64
	TotalPopulation  interface{}
}

func (q *Queries) GetCityWithDetails(ctx context.Context, id int64) (GetCityWithDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getCityWithDetails, id)
	var i GetCityWithDetailsRow
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.ProvinceID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProvinceName,
		&i.ProvincePublicID,
		&i.BarangayCount,
		&i.TotalPopulation,
	)
	return i, err
}

const getFeeder = `-- name: GetFeeder :one
SELECT id, public_id, feeder_number, boundary, created_at, updated_at FROM feeders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFeeder(ctx context.Context, id int64) (Feeder, error) {
	row := q.db.QueryRowContext(ctx, getFeeder, id)
	var i Feeder
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FeederNumber,
		&i.Boundary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeederByNumber = `-- name: GetFeederByNumber :one
SELECT id, public_id, feeder_number, boundary, created_at, updated_at FROM feeders
WHERE feeder_number = $1 LIMIT 1
`

func (q *Queries) GetFeederByNumber(ctx context.Context, feederNumber int64) (Feeder, error) {
	row := q.db.QueryRowContext(ctx, getFeederByNumber, feederNumber)
	var i Feeder
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FeederNumber,
		&i.Boundary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeederByPublicID = `-- name: GetFeederByPublicID :one
SELECT id, public_id, feeder_number, boundary, created_at, updated_at FROM feeders
WHERE public_id = $1 LIMIT 1
`

func (q *Queries) GetFeederByPublicID(ctx context.Context, publicID uuid.UUID) (Feeder, error) {
	row := q.db.QueryRowContext(ctx, getFeederByPublicID, publicID)
	var i Feeder
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FeederNumber,
		&i.Boundary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedersWithBarangayCount = `-- name: GetFeedersWithBarangayCount :many
SELECT 
    f.id, f.public_id, f.feeder_number, f.boundary, f.created_at, f.updated_at,
    COUNT(b.id) as barangay_count,
    COALESCE(SUM(b.population), 0) as total_population
FROM feeders f
LEFT JOIN barangays b ON f.id = b.feeder_id
GROUP BY f.id
ORDER BY f.feeder_number
`

type GetFeedersWithBarangayCountRow struct {
	ID              int64
	PublicID        uuid.UUID
	FeederNumber    int64
	Boundary        interface{}
	CreatedAt       time.Time
	UpdatedAt       sql.NullTime
	BarangayCount   int64
	TotalPopulation interface{}
}

func (q *Queries) GetFeedersWithBarangayCount(ctx context.Context) ([]GetFeedersWithBarangayCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedersWithBarangayCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedersWithBarangayCountRow
	for rows.Next() {
		var i GetFeedersWithBarangayCountRow
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.FeederNumber,
			&i.Boundary,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BarangayCount,
			&i.TotalPopulation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGeographicHierarchy = `-- name: GetGeographicHierarchy :many
SELECT 
    p.name as province_name,
    c.name as city_name,
    b.name as barangay_name,
    b.population as barangay_population,
    f.feeder_number
FROM provinces p
JOIN cities c ON p.id = c.province_id
JOIN barangays b ON c.id = b.city_id
LEFT JOIN feeders f ON b.feeder_id = f.id
ORDER BY p.name, c.name, b.name
`

type GetGeographicHierarchyRow struct {
	ProvinceName       string
	CityName           string
	BarangayName       string
	BarangayPopulation sql.NullInt32
	FeederNumber       sql.NullInt64
}

func (q *Queries) GetGeographicHierarchy(ctx context.Context) ([]GetGeographicHierarchyRow, error) {
	rows, err := q.db.QueryContext(ctx, getGeographicHierarchy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGeographicHierarchyRow
	for rows.Next() {
		var i GetGeographicHierarchyRow
		if err := rows.Scan(
			&i.ProvinceName,
			&i.CityName,
			&i.BarangayName,
			&i.BarangayPopulation,
			&i.FeederNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationByCoordinates = `-- name: GetLocationByCoordinates :one
SELECT 
    b.id as barangay_id,
    b.name as barangay_name,
    c.id as city_id,
    c.name as city_name,
    p.id as province_id,
    p.name as province_name,
    f.id as feeder_id,
    f.feeder_number
FROM barangays b
JOIN cities c ON b.city_id = c.id
JOIN provinces p ON c.province_id = p.id
LEFT JOIN feeders f ON b.feeder_id = f.id
WHERE ST_Within($1, b.boundary) -- $1 is point geometry
LIMIT 1
`

type GetLocationByCoordinatesRow struct {
	BarangayID   int64
	BarangayName string
	CityID       int64
	CityName     string
	ProvinceID   int64
	ProvinceName string
	FeederID     sql.NullInt64
	FeederNumber sql.NullInt64
}

func (q *Queries) GetLocationByCoordinates(ctx context.Context, stWithin interface{}) (GetLocationByCoordinatesRow, error) {
	row := q.db.QueryRowContext(ctx, getLocationByCoordinates, stWithin)
	var i GetLocationByCoordinatesRow
	err := row.Scan(
		&i.BarangayID,
		&i.BarangayName,
		&i.CityID,
		&i.CityName,
		&i.ProvinceID,
		&i.ProvinceName,
		&i.FeederID,
		&i.FeederNumber,
	)
	return i, err
}

const getProvince = `-- name: GetProvince :one
SELECT id, public_id, name, boundary, population, population_year, created_at, updated_at FROM provinces
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProvince(ctx context.Context, id int64) (Province, error) {
	row := q.db.QueryRowContext(ctx, getProvince, id)
	var i Province
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProvinceByName = `-- name: GetProvinceByName :one
SELECT id, public_id, name, boundary, population, population_year, created_at, updated_at FROM provinces
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetProvinceByName(ctx context.Context, name string) (Province, error) {
	row := q.db.QueryRowContext(ctx, getProvinceByName, name)
	var i Province
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProvinceByPublicID = `-- name: GetProvinceByPublicID :one
SELECT id, public_id, name, boundary, population, population_year, created_at, updated_at FROM provinces
WHERE public_id = $1 LIMIT 1
`

func (q *Queries) GetProvinceByPublicID(ctx context.Context, publicID uuid.UUID) (Province, error) {
	row := q.db.QueryRowContext(ctx, getProvinceByPublicID, publicID)
	var i Province
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProvinceWithDetails = `-- name: GetProvinceWithDetails :one
SELECT 
    p.id, p.public_id, p.name, p.boundary, p.population, p.population_year, p.created_at, p.updated_at,
    COUNT(c.id) as city_count,
    COUNT(b.id) as barangay_count,
    COALESCE(SUM(b.population), 0) as total_population
FROM provinces p
LEFT JOIN cities c ON p.id = c.province_id
LEFT JOIN barangays b ON c.id = b.city_id
WHERE p.id = $1
GROUP BY p.id
`

type GetProvinceWithDetailsRow struct {
	ID              int64
	PublicID        uuid.UUID
	Name            string
	Boundary        interface{}
	Population      sql.NullInt32
	PopulationYear  sql.NullInt16
	CreatedAt       time.Time
	UpdatedAt       sql.NullTime
	CityCount       int64
	BarangayCount   int64
	TotalPopulation interface{}
}

func (q *Queries) GetProvinceWithDetails(ctx context.Context, id int64) (GetProvinceWithDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getProvinceWithDetails, id)
	var i GetProvinceWithDetailsRow
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CityCount,
		&i.BarangayCount,
		&i.TotalPopulation,
	)
	return i, err
}

const listBarangays = `-- name: ListBarangays :many
SELECT id, public_id, name, city_id, feeder_id, boundary, population, population_year, created_at, updated_at FROM barangays
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListBarangaysParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListBarangays(ctx context.Context, arg ListBarangaysParams) ([]Barangay, error) {
	rows, err := q.db.QueryContext(ctx, listBarangays, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Barangay
	for rows.Next() {
		var i Barangay
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.CityID,
			&i.FeederID,
			&i.Boundary,
			&i.Population,
			&i.PopulationYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBarangaysByCity = `-- name: ListBarangaysByCity :many
SELECT id, public_id, name, city_id, feeder_id, boundary, population, population_year, created_at, updated_at FROM barangays
WHERE city_id = $1
ORDER BY name
`

func (q *Queries) ListBarangaysByCity(ctx context.Context, cityID int64) ([]Barangay, error) {
	rows, err := q.db.QueryContext(ctx, listBarangaysByCity, cityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Barangay
	for rows.Next() {
		var i Barangay
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.CityID,
			&i.FeederID,
			&i.Boundary,
			&i.Population,
			&i.PopulationYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBarangaysByFeeder = `-- name: ListBarangaysByFeeder :many
SELECT id, public_id, name, city_id, feeder_id, boundary, population, population_year, created_at, updated_at FROM barangays
WHERE feeder_id = $1
ORDER BY name
`

func (q *Queries) ListBarangaysByFeeder(ctx context.Context, feederID sql.NullInt64) ([]Barangay, error) {
	rows, err := q.db.QueryContext(ctx, listBarangaysByFeeder, feederID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Barangay
	for rows.Next() {
		var i Barangay
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.CityID,
			&i.FeederID,
			&i.Boundary,
			&i.Population,
			&i.PopulationYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCities = `-- name: ListCities :many
SELECT id, public_id, name, province_id, boundary, population, population_year, created_at, updated_at FROM cities
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListCitiesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCities(ctx context.Context, arg ListCitiesParams) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, listCities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.ProvinceID,
			&i.Boundary,
			&i.Population,
			&i.PopulationYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCitiesByProvince = `-- name: ListCitiesByProvince :many
SELECT id, public_id, name, province_id, boundary, population, population_year, created_at, updated_at FROM cities
WHERE province_id = $1
ORDER BY name
`

func (q *Queries) ListCitiesByProvince(ctx context.Context, provinceID int64) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, listCitiesByProvince, provinceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.ProvinceID,
			&i.Boundary,
			&i.Population,
			&i.PopulationYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeeders = `-- name: ListFeeders :many
SELECT id, public_id, feeder_number, boundary, created_at, updated_at FROM feeders
ORDER BY feeder_number
LIMIT $1 OFFSET $2
`

type ListFeedersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListFeeders(ctx context.Context, arg ListFeedersParams) ([]Feeder, error) {
	rows, err := q.db.QueryContext(ctx, listFeeders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feeder
	for rows.Next() {
		var i Feeder
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.FeederNumber,
			&i.Boundary,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProvinces = `-- name: ListProvinces :many
SELECT id, public_id, name, boundary, population, population_year, created_at, updated_at FROM provinces
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListProvincesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListProvinces(ctx context.Context, arg ListProvincesParams) ([]Province, error) {
	rows, err := q.db.QueryContext(ctx, listProvinces, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Province
	for rows.Next() {
		var i Province
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.Boundary,
			&i.Population,
			&i.PopulationYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBarangays = `-- name: SearchBarangays :many
SELECT id, public_id, name, city_id, feeder_id, boundary, population, population_year, created_at, updated_at FROM barangays
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name
LIMIT $2 OFFSET $3
`

type SearchBarangaysParams struct {
	Column1 sql.NullString
	Limit   int32
	Offset  int32
}

func (q *Queries) SearchBarangays(ctx context.Context, arg SearchBarangaysParams) ([]Barangay, error) {
	rows, err := q.db.QueryContext(ctx, searchBarangays, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Barangay
	for rows.Next() {
		var i Barangay
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.CityID,
			&i.FeederID,
			&i.Boundary,
			&i.Population,
			&i.PopulationYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCities = `-- name: SearchCities :many
SELECT id, public_id, name, province_id, boundary, population, population_year, created_at, updated_at FROM cities
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name
LIMIT $2 OFFSET $3
`

type SearchCitiesParams struct {
	Column1 sql.NullString
	Limit   int32
	Offset  int32
}

func (q *Queries) SearchCities(ctx context.Context, arg SearchCitiesParams) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, searchCities, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.ProvinceID,
			&i.Boundary,
			&i.Population,
			&i.PopulationYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProvinces = `-- name: SearchProvinces :many
SELECT id, public_id, name, boundary, population, population_year, created_at, updated_at FROM provinces
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name
LIMIT $2 OFFSET $3
`

type SearchProvincesParams struct {
	Column1 sql.NullString
	Limit   int32
	Offset  int32
}

func (q *Queries) SearchProvinces(ctx context.Context, arg SearchProvincesParams) ([]Province, error) {
	rows, err := q.db.QueryContext(ctx, searchProvinces, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Province
	for rows.Next() {
		var i Province
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.Boundary,
			&i.Population,
			&i.PopulationYear,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBarangay = `-- name: UpdateBarangay :one
UPDATE barangays
SET 
    name = $2,
    city_id = $3,
    feeder_id = $4,
    boundary = $5,
    population = $6,
    population_year = $7,
    updated_at = NOW()
WHERE id = $1
RETURNING id, public_id, name, city_id, feeder_id, boundary, population, population_year, created_at, updated_at
`

type UpdateBarangayParams struct {
	ID             int64
	Name           string
	CityID         int64
	FeederID       sql.NullInt64
	Boundary       interface{}
	Population     sql.NullInt32
	PopulationYear sql.NullInt16
}

func (q *Queries) UpdateBarangay(ctx context.Context, arg UpdateBarangayParams) (Barangay, error) {
	row := q.db.QueryRowContext(ctx, updateBarangay,
		arg.ID,
		arg.Name,
		arg.CityID,
		arg.FeederID,
		arg.Boundary,
		arg.Population,
		arg.PopulationYear,
	)
	var i Barangay
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.CityID,
		&i.FeederID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCity = `-- name: UpdateCity :one
UPDATE cities
SET 
    name = $2,
    province_id = $3,
    boundary = $4,
    population = $5,
    population_year = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, public_id, name, province_id, boundary, population, population_year, created_at, updated_at
`

type UpdateCityParams struct {
	ID             int64
	Name           string
	ProvinceID     int64
	Boundary       interface{}
	Population     sql.NullInt32
	PopulationYear sql.NullInt16
}

func (q *Queries) UpdateCity(ctx context.Context, arg UpdateCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, updateCity,
		arg.ID,
		arg.Name,
		arg.ProvinceID,
		arg.Boundary,
		arg.Population,
		arg.PopulationYear,
	)
	var i City
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.ProvinceID,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFeeder = `-- name: UpdateFeeder :one
UPDATE feeders
SET 
    feeder_number = $2,
    boundary = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, public_id, feeder_number, boundary, created_at, updated_at
`

type UpdateFeederParams struct {
	ID           int64
	FeederNumber int64
	Boundary     interface{}
}

func (q *Queries) UpdateFeeder(ctx context.Context, arg UpdateFeederParams) (Feeder, error) {
	row := q.db.QueryRowContext(ctx, updateFeeder, arg.ID, arg.FeederNumber, arg.Boundary)
	var i Feeder
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FeederNumber,
		&i.Boundary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProvince = `-- name: UpdateProvince :one
UPDATE provinces
SET 
    name = $2,
    boundary = $3,
    population = $4,
    population_year = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, public_id, name, boundary, population, population_year, created_at, updated_at
`

type UpdateProvinceParams struct {
	ID             int64
	Name           string
	Boundary       interface{}
	Population     sql.NullInt32
	PopulationYear sql.NullInt16
}

func (q *Queries) UpdateProvince(ctx context.Context, arg UpdateProvinceParams) (Province, error) {
	row := q.db.QueryRowContext(ctx, updateProvince,
		arg.ID,
		arg.Name,
		arg.Boundary,
		arg.Population,
		arg.PopulationYear,
	)
	var i Province
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Boundary,
		&i.Population,
		&i.PopulationYear,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
